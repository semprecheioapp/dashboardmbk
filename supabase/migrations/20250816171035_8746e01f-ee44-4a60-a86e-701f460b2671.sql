-- Criar tabela para pipelines de oportunidades
CREATE TABLE public.pipelines (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  moeda VARCHAR(3) NOT NULL DEFAULT 'BRL',
  empresa_id BIGINT NOT NULL,
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- Criar tabela para colunas do kanban
CREATE TABLE public.kanban_colunas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  pipeline_id BIGINT NOT NULL,
  nome VARCHAR(255) NOT NULL,
  ordem INTEGER NOT NULL,
  cor VARCHAR(7) DEFAULT '#3b82f6',
  webhook_ativo BOOLEAN NOT NULL DEFAULT false,
  webhook_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  FOREIGN KEY (pipeline_id) REFERENCES public.pipelines(id) ON DELETE CASCADE
);

-- Adicionar colunas para kanban na tabela novos_leads
ALTER TABLE public.novos_leads 
ADD COLUMN pipeline_id BIGINT,
ADD COLUMN kanban_coluna_id BIGINT,
ADD COLUMN posicao_kanban INTEGER DEFAULT 0;

-- Criar Ã­ndices para performance
CREATE INDEX idx_pipelines_empresa_id ON public.pipelines(empresa_id);
CREATE INDEX idx_kanban_colunas_pipeline_id ON public.kanban_colunas(pipeline_id);
CREATE INDEX idx_novos_leads_pipeline_id ON public.novos_leads(pipeline_id);
CREATE INDEX idx_novos_leads_kanban_coluna_id ON public.novos_leads(kanban_coluna_id);

-- RLS Policies para pipelines
ALTER TABLE public.pipelines ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own empresa pipelines" 
  ON public.pipelines FOR SELECT 
  USING (empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid()));

CREATE POLICY "Users can insert own empresa pipelines" 
  ON public.pipelines FOR INSERT 
  WITH CHECK (empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid()));

CREATE POLICY "Users can update own empresa pipelines" 
  ON public.pipelines FOR UPDATE 
  USING (empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid()));

CREATE POLICY "Users can delete own empresa pipelines" 
  ON public.pipelines FOR DELETE 
  USING (empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid()));

-- RLS Policies para kanban_colunas
ALTER TABLE public.kanban_colunas ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own empresa kanban columns" 
  ON public.kanban_colunas FOR SELECT 
  USING (pipeline_id IN (SELECT id FROM pipelines WHERE empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid())));

CREATE POLICY "Users can insert own empresa kanban columns" 
  ON public.kanban_colunas FOR INSERT 
  WITH CHECK (pipeline_id IN (SELECT id FROM pipelines WHERE empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid())));

CREATE POLICY "Users can update own empresa kanban columns" 
  ON public.kanban_colunas FOR UPDATE 
  USING (pipeline_id IN (SELECT id FROM pipelines WHERE empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid())));

CREATE POLICY "Users can delete own empresa kanban columns" 
  ON public.kanban_colunas FOR DELETE 
  USING (pipeline_id IN (SELECT id FROM pipelines WHERE empresa_id IN (SELECT empresa_id FROM profiles WHERE id = auth.uid())));

-- Trigger para updated_at nas novas tabelas
CREATE TRIGGER update_pipelines_updated_at
  BEFORE UPDATE ON public.pipelines
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_kanban_colunas_updated_at
  BEFORE UPDATE ON public.kanban_colunas
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();