-- ============================================
-- üß† SISTEMA MULTI-TENANT COMPLETO DASHBOARD_IA
-- ============================================

-- ========================
-- üè¢ TABELA: empresas (CENTRAL)
-- ========================
CREATE TABLE public.empresas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  name_empresa TEXT NOT NULL,
  email TEXT UNIQUE,
  telefone TEXT,
  apikey TEXT UNIQUE,
  ativo BOOLEAN DEFAULT true,
  plano TEXT DEFAULT 'free',
  limite_leads INTEGER DEFAULT 1000,
  limite_mensagens INTEGER DEFAULT 10000
);

-- ========================
-- üë§ TABELA: profiles 
-- ========================
CREATE TABLE public.profiles (
  id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE PRIMARY KEY,
  empresa_id BIGINT REFERENCES public.empresas(id) ON DELETE CASCADE,
  email TEXT,
  nome TEXT,
  role TEXT DEFAULT 'user',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ========================
-- üìû TABELA: novos_leads
-- ========================
CREATE TABLE public.novos_leads (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  name TEXT,
  number TEXT,
  qualificacao TEXT,
  resumo_conversa TEXT,
  etapa INT DEFAULT 1,
  timeout TIMESTAMPTZ,
  origem TEXT DEFAULT 'whatsapp'
);

-- ========================
-- üí¨ TABELA: message_buffer
-- ========================
CREATE TABLE public.message_buffer (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  content TEXT,
  chatid TEXT,
  idMessage TEXT,
  timestamp INT,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ========================
-- ü§ñ TABELA: memoria_ai
-- ========================
CREATE TABLE public.memoria_ai (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  session_id TEXT,
  data_atual TEXT,
  prompt TEXT,
  response TEXT,
  tokens_used INTEGER,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ======================================
-- üö® TABELA: logs_erros_agent
-- ======================================
CREATE TABLE public.logs_erros_agent (
  id SERIAL PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  chatid VARCHAR,
  sessionId VARCHAR,
  workflowName VARCHAR,
  description TEXT,
  json JSONB,
  queue BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ======================================
-- üì± TABELA: logs_erros_whatsapp
-- ======================================
CREATE TABLE public.logs_erros_whatsapp (
  id SERIAL PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  chatid VARCHAR,
  sessionid VARCHAR,
  workflowname VARCHAR,
  description TEXT,
  json JSONB,
  queue BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- ======================================
-- üö´ TABELA: numero_bloqueados
-- ======================================
CREATE TABLE public.numero_bloqueados (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT now(),
  number TEXT,
  name TEXT,
  motivo TEXT,
  bloqueado_por UUID REFERENCES auth.users(id)
);

-- ======================================
-- ‚öôÔ∏è TABELA: configuracoes_empresa
-- ======================================
CREATE TABLE public.configuracoes_empresa (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  empresa_id BIGINT NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE UNIQUE,
  webhook_url TEXT,
  api_whatsapp TEXT,
  prompt_sistema TEXT,
  horario_funcionamento JSONB,
  mensagem_fora_horario TEXT,
  auto_resposta BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

-- ============================================
-- üîê √çNDICES PARA PERFORMANCE
-- ============================================

-- Empresas
CREATE INDEX idx_empresas_email ON public.empresas (email);
CREATE INDEX idx_empresas_telefone ON public.empresas (telefone);
CREATE INDEX idx_empresas_apikey ON public.empresas (apikey);

-- Profiles
CREATE INDEX idx_profiles_empresa_id ON public.profiles (empresa_id);

-- Novos Leads
CREATE INDEX idx_novos_leads_empresa_id ON public.novos_leads (empresa_id);
CREATE INDEX idx_novos_leads_number ON public.novos_leads (number);
CREATE INDEX idx_novos_leads_etapa ON public.novos_leads (etapa);
CREATE INDEX idx_novos_leads_timeout ON public.novos_leads (timeout);
CREATE INDEX idx_novos_leads_created_at ON public.novos_leads (created_at);

-- Message Buffer
CREATE INDEX idx_message_buffer_empresa_id ON public.message_buffer (empresa_id);
CREATE INDEX idx_message_buffer_chatid ON public.message_buffer (chatid);
CREATE INDEX idx_message_buffer_created_at ON public.message_buffer (created_at);

-- Memoria AI
CREATE INDEX idx_memoria_ai_empresa_id ON public.memoria_ai (empresa_id);
CREATE INDEX idx_memoria_ai_session_id ON public.memoria_ai (session_id);
CREATE INDEX idx_memoria_ai_created_at ON public.memoria_ai (created_at);

-- N√∫mero Bloqueados
CREATE INDEX idx_numero_bloqueados_empresa_id ON public.numero_bloqueados (empresa_id);
CREATE INDEX idx_numero_bloqueados_number ON public.numero_bloqueados (number);

-- ============================================
-- üîê ROW LEVEL SECURITY (RLS)
-- ============================================

-- Habilitar RLS em todas as tabelas
ALTER TABLE public.empresas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.novos_leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_buffer ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.memoria_ai ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.logs_erros_agent ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.logs_erros_whatsapp ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.numero_bloqueados ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.configuracoes_empresa ENABLE ROW LEVEL SECURITY;

-- ============================================
-- üîë POL√çTICAS RLS - EMPRESAS
-- ============================================

-- Super admins podem ver todas empresas
CREATE POLICY "Super admins can view all empresas" ON public.empresas
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.role = 'super_admin'
    )
  );

-- Usu√°rios podem ver apenas sua empresa
CREATE POLICY "Users can view their empresa" ON public.empresas
  FOR SELECT USING (
    id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

-- ============================================
-- üîë POL√çTICAS RLS - PROFILES
-- ============================================

-- Usu√°rios podem ver seu pr√≥prio perfil
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (id = auth.uid());

-- Super admins podem ver todos perfis
CREATE POLICY "Super admins can view all profiles" ON public.profiles
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.profiles p
      WHERE p.id = auth.uid() AND p.role = 'super_admin'
    )
  );

-- Usu√°rios podem atualizar seu pr√≥prio perfil
CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (id = auth.uid());

-- ============================================
-- üîë POL√çTICAS RLS - DADOS DA EMPRESA
-- ============================================

-- Pol√≠tica gen√©rica para todas tabelas com empresa_id
CREATE POLICY "Users can access own empresa data" ON public.novos_leads
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa buffer" ON public.message_buffer
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa memoria" ON public.memoria_ai
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa logs_agent" ON public.logs_erros_agent
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa logs_whatsapp" ON public.logs_erros_whatsapp
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa blocked numbers" ON public.numero_bloqueados
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

CREATE POLICY "Users can access own empresa config" ON public.configuracoes_empresa
  FOR ALL USING (
    empresa_id = (
      SELECT empresa_id FROM public.profiles 
      WHERE profiles.id = auth.uid()
    )
  );

-- ============================================
-- üîß FUN√á√ïES HELPER
-- ============================================

-- Fun√ß√£o para buscar empresa por telefone
CREATE OR REPLACE FUNCTION public.get_empresa_by_phone(phone_number TEXT)
RETURNS TABLE(empresa_id BIGINT, nome TEXT) 
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT id, name_empresa 
  FROM public.empresas 
  WHERE telefone = phone_number AND ativo = true
  LIMIT 1;
$$;

-- Fun√ß√£o para buscar empresa por email
CREATE OR REPLACE FUNCTION public.get_empresa_by_email(email_address TEXT)
RETURNS TABLE(empresa_id BIGINT, nome TEXT)
LANGUAGE sql
SECURITY DEFINER  
AS $$
  SELECT id, name_empresa
  FROM public.empresas
  WHERE email = email_address AND ativo = true
  LIMIT 1;
$$;

-- ============================================
-- üéØ TRIGGER PARA PROFILES AUTOM√ÅTICO
-- ============================================

-- Fun√ß√£o para criar profile automaticamente
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.profiles (id, email, nome)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'name', NEW.email)
  );
  RETURN NEW;
END;
$$;

-- Trigger para criar profile quando usu√°rio se registra
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ============================================
-- üéØ TRIGGER PARA UPDATED_AT
-- ============================================

-- Fun√ß√£o para atualizar updated_at
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para updated_at
CREATE TRIGGER update_empresas_updated_at
  BEFORE UPDATE ON public.empresas
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_novos_leads_updated_at
  BEFORE UPDATE ON public.novos_leads
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_configuracoes_updated_at
  BEFORE UPDATE ON public.configuracoes_empresa
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();